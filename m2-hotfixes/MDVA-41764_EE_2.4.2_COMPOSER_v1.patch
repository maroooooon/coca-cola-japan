diff --git a/vendor/magento/module-quote/Model/CartLockedException.php b/vendor/magento/module-quote/Model/CartLockedException.php
new file mode 100644
index 00000000000..7f2aa877842
--- /dev/null
+++ b/vendor/magento/module-quote/Model/CartLockedException.php
@@ -0,0 +1,18 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\Quote\Model;
+
+use Magento\Framework\Exception\StateException;
+
+/**
+ * Thrown when the cart is locked for processing.
+ */
+class CartLockedException extends StateException
+{
+
+}
diff --git a/vendor/magento/module-quote/Model/CartMutex.php b/vendor/magento/module-quote/Model/CartMutex.php
new file mode 100644
index 00000000000..3ff1d40b44f
--- /dev/null
+++ b/vendor/magento/module-quote/Model/CartMutex.php
@@ -0,0 +1,78 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\Quote\Model;
+
+use Magento\Framework\Lock\LockManagerInterface;
+use Psr\Log\LoggerInterface;
+
+/**
+ * @inheritDoc
+ */
+class CartMutex implements CartMutexInterface
+{
+    /**
+     * @var LockManagerInterface
+     */
+    private $lockManager;
+
+    /**
+     * Lifetime of the lock for cart processing.
+     *
+     * Value of the variable in seconds.
+     *
+     * @var int
+     */
+    private $timeout;
+
+    /**
+     * @var LoggerInterface
+     */
+    private $logger;
+
+    /**
+     * @param LockManagerInterface $lockManager
+     * @param LoggerInterface $logger
+     * @param int $timeout
+     */
+    public function __construct(
+        LockManagerInterface $lockManager,
+        LoggerInterface $logger,
+        int $timeout = 20
+    ) {
+        $this->lockManager = $lockManager;
+        $this->timeout = $timeout;
+        $this->logger = $logger;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function execute(int $id, callable $callable, array $args = [])
+    {
+        $lockName = 'cart_lock_' . $id;
+
+        if ($this->lockManager->isLocked($lockName)) {
+            $this->logger->critical(
+                'The cart is locked for processing, the request has been aborted. Quote ID: ' . $id
+            );
+            throw new CartLockedException(
+                __('The cart is locked for processing. Please try again later.')
+            );
+        }
+
+        $this->lockManager->lock($lockName, $this->timeout);
+
+        try {
+            $result = $callable(...$args);
+        } finally {
+            $this->lockManager->unlock($lockName);
+        }
+
+        return $result;
+    }
+}
diff --git a/vendor/magento/module-quote/Model/CartMutexInterface.php b/vendor/magento/module-quote/Model/CartMutexInterface.php
new file mode 100644
index 00000000000..6681c638829
--- /dev/null
+++ b/vendor/magento/module-quote/Model/CartMutexInterface.php
@@ -0,0 +1,25 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\Quote\Model;
+
+/**
+ * Intended to prevent race conditions during quote processing by concurrent requests.
+ */
+interface CartMutexInterface
+{
+    /**
+     * Acquires a lock for quote, executes callable and releases the lock after.
+     *
+     * @param int $id
+     * @param callable $callable
+     * @param array $args
+     * @return mixed
+     * @throws CartLockedException
+     */
+    public function execute(int $id, callable $callable, array $args = []);
+}
diff --git a/vendor/magento/module-quote/Model/QuoteManagement.php b/vendor/magento/module-quote/Model/QuoteManagement.php
index 1d4b8feba07..2e1446b21c6 100644
--- a/vendor/magento/module-quote/Model/QuoteManagement.php
+++ b/vendor/magento/module-quote/Model/QuoteManagement.php
@@ -158,6 +158,11 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
      */
     private $remoteAddress;
 
+    /**
+     * @var CartMutexInterface
+     */
+    private $cartMutex;
+
     /**
      * @param EventManager $eventManager
      * @param SubmitQuoteValidator $submitQuoteValidator
@@ -182,7 +187,8 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
      * @param \Magento\Quote\Model\QuoteIdMaskFactory|null $quoteIdMaskFactory
      * @param \Magento\Customer\Api\AddressRepositoryInterface|null $addressRepository
      * @param \Magento\Framework\App\RequestInterface|null $request
-     * @param \Magento\Framework\HTTP\PhpEnvironment\RemoteAddress $remoteAddress
+     * @param \Magento\Framework\HTTP\PhpEnvironment\RemoteAddress|null $remoteAddress
+     * @param \Magento\Quote\Model\CartMutexInterface|null $cartMutex
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
     public function __construct(
@@ -209,7 +215,8 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
         \Magento\Quote\Model\QuoteIdMaskFactory $quoteIdMaskFactory = null,
         \Magento\Customer\Api\AddressRepositoryInterface $addressRepository = null,
         \Magento\Framework\App\RequestInterface $request = null,
-        \Magento\Framework\HTTP\PhpEnvironment\RemoteAddress $remoteAddress = null
+        \Magento\Framework\HTTP\PhpEnvironment\RemoteAddress $remoteAddress = null,
+        ?\Magento\Quote\Model\CartMutexInterface $cartMutex = null
     ) {
         $this->eventManager = $eventManager;
         $this->submitQuoteValidator = $submitQuoteValidator;
@@ -239,6 +246,8 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
             ->get(\Magento\Framework\App\RequestInterface::class);
         $this->remoteAddress = $remoteAddress ?: ObjectManager::getInstance()
             ->get(\Magento\Framework\HTTP\PhpEnvironment\RemoteAddress::class);
+        $this->cartMutex = $cartMutex
+            ?? ObjectManager::getInstance()->get(CartMutexInterface::class);
     }
 
     /**
@@ -366,6 +375,24 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
      * @inheritdoc
      */
     public function placeOrder($cartId, PaymentInterface $paymentMethod = null)
+    {
+        return $this->cartMutex->execute(
+            (int)$cartId,
+            \Closure::fromCallable([$this, 'placeOrderRun']),
+            [$cartId, $paymentMethod]
+        );
+    }
+
+    /**
+     * Places an order for a specified cart.
+     *
+     * @param int $cartId The cart ID.
+     * @param PaymentInterface|null $paymentMethod
+     * @throws CouldNotSaveException
+     * @return int Order ID.
+     * @SuppressWarnings(PHPMD.UnusedPrivateMethod)
+     */
+    private function placeOrderRun($cartId, PaymentInterface $paymentMethod = null)
     {
         $quote = $this->quoteRepository->getActive($cartId);
         if ($paymentMethod) {
diff --git a/vendor/magento/module-quote/etc/di.xml b/vendor/magento/module-quote/etc/di.xml
index f66001e7789..cf461e809c7 100644
--- a/vendor/magento/module-quote/etc/di.xml
+++ b/vendor/magento/module-quote/etc/di.xml
@@ -44,6 +44,7 @@
     <preference for="Magento\Quote\Api\Data\EstimateAddressInterface" type="Magento\Quote\Model\EstimateAddress" />
     <preference for="Magento\Quote\Api\Data\ProductOptionInterface" type="Magento\Quote\Model\Quote\ProductOption" />
     <preference for="Magento\Quote\Model\ValidationRules\QuoteValidationRuleInterface" type="Magento\Quote\Model\ValidationRules\QuoteValidationComposite\Proxy"/>
+    <preference for="Magento\Quote\Model\CartMutexInterface" type="Magento\Quote\Model\CartMutex"/>
     <type name="Magento\Webapi\Controller\Rest\ParamsOverrider">
         <arguments>
             <argument name="paramOverriders" xsi:type="array">
diff --git a/vendor/magento/module-quote/i18n/en_US.csv b/vendor/magento/module-quote/i18n/en_US.csv
index c899c432c70..4240990fd87 100644
--- a/vendor/magento/module-quote/i18n/en_US.csv
+++ b/vendor/magento/module-quote/i18n/en_US.csv
@@ -68,3 +68,4 @@ Carts,Carts
 "Invalid state change requested","Invalid state change requested"
 "Validated Country Code","Validated Country Code"
 "Validated Vat Number","Validated Vat Number"
+"The cart is locked for processing. Please try again later.","The cart is locked for processing. Please try again later."
